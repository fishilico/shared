include ../../linux-flags.mk

CHMOD ?= chmod
GREP ?= grep
MKDIR ?= mkdir
OBJCOPY ?= objcopy
SED ?= sed
SH ?= sh
WGET ?= wget

# Do not compile both with -pie and -shared
NOLIBC_CFLAGS := $(filter-out -fPIC -fPIE, $(CFLAGS))
NOLIBC_LDFLAGS := $(filter-out -fPIC -fPIE -pie -shared, $(LDFLAGS))

# Compile a shared object because there is no need of ld.so on Intel architecture.
# However, some ARM compilers rely on ld.so to remap offsets when doing ASLR, so
# whitelist some known-to-work compilers, such as arm-none-eabi-gcc (bare metal).
ifeq ($(call can-run,$(CC) -E -v - < /dev/null 2>&1 > /dev/null | $(GREP) -qi "^Target:\s*\(i.86\|x86\|arm-none-\)"),y)
NOLIBC_CFLAGS += -fPIC
NOLIBC_LDFLAGS += -fPIC -shared
else
NOLIBC_CFLAGS += -fPIE
NOLIBC_LDFLAGS += -fPIE -pie
endif

# Disable some features because linking is done without the standard library
NOLIBC_CFLAGS += -fno-builtin -fno-stack-protector
NOLIBC_LDFLAGS += -nostdlib

# Disable SSE code generation (which requires aligned stack, which is not guaranteed when using _start)
NOLIBC_CFLAGS += $(call ccpp-option,-mno-sse)

# Do not include a build ID, to make the binaries slightly smaller
NOLIBC_LDFLAGS += -Wl,--build-id=none

# Do not generate .eh_frame sections, to make the binaries slightly smaller
NO_ASYNC_UNWIND_TABLES_OPT := $(call ccpp-option,-fno-asynchronous-unwind-tables)
NOLIBC_CFLAGS += $(NO_ASYNC_UNWIND_TABLES_OPT)
NOLIBC_LDFLAGS += $(NO_ASYNC_UNWIND_TABLES_OPT)

# Use custom include dir if it exists
NOLIBC_CFLAGS += $(shell [ -d include ] && echo '-I./include')

# Files
C_SOURCES := $(filter-out _memcpy.c, $(wildcard *.c))
ASM_SOURCES := $(wildcard *.S)
BINARIES := $(C_SOURCES:%.c=%.$(BIN_EXT)) $(ASM_SOURCES:%.S=%.$(BIN_EXT)) shebang_print_args

all: $(BINARIES)
	@:

clean:
	$(CLEAN_CMD)

# Test shellcode separately
test: all
	@$(call run-test-progs,$(filter-out fork_shellcode.$(BIN_EXT) shellcode.$(BIN_EXT) tinyelf.$(BIN_EXT), $(BINARIES))) && \
	echo 'echo $$0 && set && exit' | $(call run-test-progs,fork_shellcode.$(BIN_EXT)) && \
	echo 'echo $$0 && set && exit' | $(call run-test-progs,shellcode.$(BIN_EXT)) && \
	echo ./tinyelf.$(BIN_EXT) && ($(RUN_TEST_PREFIX) ./tinyelf.$(BIN_EXT) ; test $$? = 42)

%.$(BIN_EXT): .%.o _memcpy.a
	$(V_CCLD)$(CC) $(NOLIBC_LDFLAGS) -o $@ $^

# Use a .a archive to make it optional
_memcpy.a: ._memcpy.o
	$(V_AR)$(AR) rcs $@ $^

.%.o: %.c
	$(V_CC)$(CC) $(NOLIBC_CFLAGS) $(CPPFLAGS) -c -o $@ $<

tinyelf.$(BIN_EXT): .tinyelf.o
	$(V_OBJCOPY)$(OBJCOPY) -j .data --output-target=binary $< $@ && $(CHMOD) +x $@

.%.o: %.S
	$(V_CC)$(CC) $(NOLIBC_CFLAGS) $(CPPFLAGS) -c -o $@ $<

# Make an "include" directory, when no system header is available
INCLUDE_FILES := \
    include/asm-arm/unistd.h \
    include/asm-generic/unistd.h \
    include/asm-i386/unistd_32.h \
    include/asm-x86_64/unistd_64.h \
    include/sys/syscall.h \
    include/sys/utsname.h
LINUX_URL := https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain

sync-inet:
	$(RM) -rf include
	$(MAKE) create_include

create_include: $(INCLUDE_FILES)

include/sys/syscall.h: Makefile
	$(MKDIR) -p $(@D)
	echo '/* THIS FILE IS AUTOMATICALLY GENERATED BY Makefile */' > $@
	echo '/* Include the arch-specific asm/unistd.h file */' >> $@
	echo '#if defined(__aarch64__)' >> $@
	@# cf. https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/arm64/include/uapi/asm/unistd.h?h=v5.2
	echo '#include "../asm-generic/unistd.h"' >> $@
	echo '#elif defined(__arm__)' >> $@
	echo '#include "../asm-arm/unistd.h"' >> $@
	echo '#elif defined(__i386__)' >> $@
	echo '#include "../asm-i386/unistd_32.h"' >> $@
	echo '#elif defined(__x86_64__)' >> $@
	echo '#include "../asm-x86_64/unistd_64.h"' >> $@
	echo '#endif' >> $@

# Build ARM syscall table using script "syscallhdr.sh" from the kernel
# cf. command line from https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/arch/arm/tools/Makefile?id=v5.13
include/scripts/syscallhdr.sh:
	$(MKDIR) -p $(@D)
	$(WGET) -q -O $@ $(LINUX_URL)/scripts/$(@F) || (rm $@ ; false)

include/syscall-arm/syscall.tbl:
	$(MKDIR) -p $(@D)
	$(WGET) -q -O $@ $(LINUX_URL)/arch/arm/tools/$(@F) || (rm $@ ; false)

include/asm-arm/unistd-%.h: include/syscall-arm/syscall.tbl include/scripts/syscallhdr.sh
	$(MKDIR) -p $(@D)
	$(SH) include/scripts/syscallhdr.sh --abis 'common,$*' '$<' '$@'

include/asm-arm/unistd-base.h:
	$(MKDIR) -p $(@D)
	$(WGET) -q -O $@ $(LINUX_URL)/arch/arm/include/uapi/asm/unistd.h || (rm $@ ; false)

include/asm-arm/unistd.h: include/asm-arm/unistd-base.h include/asm-arm/unistd-eabi.h include/asm-arm/unistd-oabi.h
	$(SED) 's,#include <asm/\(unistd-[a-z]*.h\)>,#include "\1",' < $< > $@

# Download asm-generic headers
include/asm-generic/unistd.h:
	$(MKDIR) -p $(@D)
	$(WGET) -q -O $@ $(LINUX_URL)/include/uapi/asm-generic/$(@F) || (rm $@ ; false)

# Build x86 syscall tables using script "syscallhdr.sh" from the kernel
# cf. command line from https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/x86/entry/syscalls/Makefile?id=v5.14
include/syscall-x86/%:
	$(MKDIR) -p $(@D)
	$(WGET) -q -O $@ $(LINUX_URL)/arch/x86/entry/syscalls/$(@F) || (rm $@ ; false)

include/asm-i386/unistd_32.h: include/syscall-x86/syscall_32.tbl include/scripts/syscallhdr.sh
	$(MKDIR) -p $(@D)
	$(SH) include/scripts/syscallhdr.sh --abis 'common,i386' --emit-nr '$<' '$@'

include/asm-x86_64/unistd_64.h: include/syscall-x86/syscall_64.tbl include/scripts/syscallhdr.sh
	$(MKDIR) -p $(@D)
	$(SH) include/scripts/syscallhdr.sh --abis 'common,64' --emit-nr '$<' '$@'

# Build sys/utsname.h file from linux/utsname.h kernel header
include/sys/linux_utsname.h:
	$(MKDIR) -p $(@D)
	$(WGET) -q -O $@ $(LINUX_URL)/include/uapi/linux/utsname.h || (rm $@ ; false)

include/sys/utsname.h: include/sys/linux_utsname.h
	$(SED) 's/struct new_utsname/struct utsname/' < $< > $@

.PHONY: all all32 all64 clean test sync-inet create_include
.PRECIOUS: .%.o include/scripts/% include/syscall-arm/% include/syscall-x86/%

-include .*.d
